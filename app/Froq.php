<?php declare(strict_types=1);
/**
 * This file is used for running Froq! app in index.php
 * to keep bootstrapping less verbose and globals clean.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 */
use froq\{App, AppEnv, Autoloader};
use froq\util\{Console, Debugger};

/**
 * Runner class.
 * @internal
 */
class Froq
{
    /** App instance. */
    private App $app;

    /** App root (URI base). */
    private string $root;

    /** App env (environment). */
    private string $env;

    /** Directory of Froq! modules.
     * Used by `froq\Autoloader` class,
     * and default is `vendor/froq`. */
    private string $dir;

    /**
     * Constructor.
     *
     * @param string      $root
     * @param string|null $env
     * @param string|null $dir
     */
    private function __construct(string $root, string $env = null, string $dir = null)
    {
        $this->dir = $dir ?: APP_DIR . '/vendor/froq';

        $this->requireLoaders();

        $autoloader = Autoloader::init($this->dir);
        $autoloader->register();

        $this->app  = $this->requireApp();
        $this->root = $root;
        $this->env  = $env ?: $this->detectEnv();
    }

    /**
     * Prepare (@see pub/index.php).
     *
     * @param  Closure $func
     * @return self
     */
    public function prepare(Closure $func): self
    {
        $func->call($this, $this->app);

        return $this;
    }

    /**
     * Run app.
     *
     * @return void
     */
    public function run(): void
    {
        try {
            $this->app->run(
                $this->root, $this->env,
                $this->requireConfigs()
            );
        } catch (Throwable $e) {
            $this->app->rerun($e);
        }
    }

    /**
     * Require loaders (both `froq\Autoloader` & `ComposerAutoloader`).
     *
     * @throws Exception
     */
    private function requireLoaders(): void
    {
        $autoloaderFile = $this->dir . '/froq/src/Autoloader.php';

        if (!file_exists($autoloaderFile)) {
            throw new Exception('Froq autoloader file "' . $autoloaderFile . '" not found!');
        }

        require $autoloaderFile;

        // Composer environment (in-app).
        $composerFile = APP_DIR . '/vendor/autoload.php';
        if (file_exists($composerFile)) {
            require $composerFile;
            return;
        }

        foreach (['/../autoload.php', '/../vendor/autoload.php'] as $file) {
            $composerFile = $this->dir . $file;
            if (file_exists($composerFile)) {
                require $composerFile;
                break;
            }
        }
    }

    /**
     * Require app.
     *
     * @throws Exception
     */
    private function requireApp(): App
    {
        $initFile = $this->dir . '/froq/src/_init.php';

        if (!file_exists($initFile)) {
            throw new Exception('Froq init file "' . $initFile . '" not found!');
        }

        // Non-composer environments.
        if (!function_exists('sugar')) {
            $sugarsFile = $this->dir . '/froq-util/src/sugars.php';
            if (file_exists($sugarsFile)) {
                require $sugarsFile;
            }
        }

        return require $initFile;
    }

    /**
     * Require configs by env or default.
     */
    private function requireConfigs(): array
    {
        return require (
            file_exists(APP_DIR . '/app/config/config-' . $this->env . '.php')
                ? APP_DIR . '/app/config/config-' . $this->env . '.php'
                : APP_DIR . '/app/config/config.php'
        );
    }

    /**
     * Detect env.
     */
    private function detectEnv(): string
    {
        return (
            $this->app->isLocal()
                ? AppEnv::DEVELOPMENT
                : AppEnv::PRODUCTION
        );
    }

    /**
     * Static initializer.
     */
    public static function init(string $root, string $env = null, string $dir = null): static
    {
        return new static($root, $env, $dir);
    }

    /**
     * Error logging for console.
     */
    public static function error(Throwable $e): void
    {
        try {
            Console::error(
                'Fatal error! ' . PHP_EOL .
                Debugger::debugString($e), true
            );
        } catch (Throwable) {
            error_log((string) $e);
        }
    }
}
